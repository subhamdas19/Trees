METHOD 2 (Using Queue and Stack)
The method 2 of normal level order traversal can also be easily modified to print level order traversal in reverse order. The idea is to use a stack to get the reverse level order. If we do normal level order traversal and instead of printing a node, push the node to a stack and then print contents of stack, we get “5 4 3 2 1” for above example tree, but output should be “4 5 2 3 1”. So to get the correct sequence (left to right at every level), we process children of a node in reverse order, we first push the right subtree to stack, then left subtree.

filter_none
edit
play_arrow

brightness_4
// A C++ program to print REVERSE level order traversal using stack and queue 
// This approach is adopted from following link 
// http://tech-queries.blogspot.in/2008/12/level-order-tree-traversal-in-reverse.html 
#include <iostream> 
#include <stack> 
#include <queue> 
using namespace std; 
  
/* A binary tree node has data, pointer to left and right children */
struct node 
{ 
    int data; 
    struct node* left; 
    struct node* right; 
}; 
  
/* Given a binary tree, print its nodes in reverse level order */
void reverseLevelOrder(node* root) 
{ 
    stack <node *> S; 
    queue <node *> Q; 
    Q.push(root); 
  
    // Do something like normal level order traversal order. Following are the 
    // differences with normal level order traversal 
    // 1) Instead of printing a node, we push the node to stack 
    // 2) Right subtree is visited before left subtree 
    while (Q.empty() == false) 
    { 
        /* Dequeue node and make it root */
        root = Q.front(); 
        Q.pop(); 
        S.push(root); 
  
        /* Enqueue right child */
        if (root->right) 
            Q.push(root->right); // NOTE: RIGHT CHILD IS ENQUEUED BEFORE LEFT 
  
        /* Enqueue left child */
        if (root->left) 
            Q.push(root->left); 
    } 
  
    // Now pop all items from stack one by one and print them 
    while (S.empty() == false) 
    { 
        root = S.top(); 
        cout << root->data << " "; 
        S.pop(); 
    } 
} 
  
/* Helper function that allocates a new node with the 
   given data and NULL left and right pointers. */
node* newNode(int data) 
{ 
    node* temp = new node; 
    temp->data = data; 
    temp->left = NULL; 
    temp->right = NULL; 
  
    return (temp); 
} 
  
/* Driver program to test above functions*/
int main() 
{ 
    struct node *root = newNode(1); 
    root->left        = newNode(2); 
    root->right       = newNode(3); 
    root->left->left  = newNode(4); 
    root->left->right = newNode(5); 
    root->right->left  = newNode(6); 
    root->right->right = newNode(7); 
  
    cout << "Level Order traversal of binary tree is \n"; 
    reverseLevelOrder(root); 
  
    return 0; 
} 

Output:
Level Order traversal of binary tree is
4 5 6 7 2 3 1
Time Complexity: O(n) where n is number of nodes in the binary tree.
