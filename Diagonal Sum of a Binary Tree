Diagonal Sum of a Binary Tree
Consider lines of slope -1 passing between nodes (dotted lines in below diagram). Diagonal sum in a binary tree is sum of all nodeâ€™s data lying between these lines. Given a Binary Tree, print all diagonal sums.

For the following input tree, output should be 9, 19, 42.
9 is sum of 1, 3 and 5.
19 is sum of 2, 6, 4 and 7.
42 is sum of 9, 10, 11 and 12.

DiagonalSum

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Algorithm:
The idea is to keep track of vertical distance from top diagonal passing through root. We increment the vertical distance we go down to next diagonal.
1. Add root with vertical distance as 0 to the queue.
2. Process the sum of all right child and right of right child and so on.
3. Add left child current node into the queue for later processing. The vertical distance of left child is vertical distance of current node plus 1.
4. Keep doing 2nd, 3rd and 4th step till the queue is empty.

Following is the implementation of above idea.

filter_none
edit
play_arrow

brightness_4
// C++ Program to find diagonal 
// sum in a Binary Tree 
#include <iostream> 
#include <stdlib.h> 
#include <map> 
using namespace std; 
  
struct Node 
{ 
    int data; 
    struct Node* left; 
    struct Node* right; 
}; 
  
struct Node* newNode(int data) 
{ 
    struct Node* Node = 
            (struct Node*)malloc(sizeof(struct Node)); 
      
    Node->data = data; 
    Node->left = Node->right = NULL; 
  
    return Node; 
} 
  
// root - root of the binary tree 
// vd - vertical distance diagonally 
// diagonalSum - map to store Diagonal  
// Sum(Passed by Reference) 
void diagonalSumUtil(struct Node* root, 
                int vd, map<int, int> &diagonalSum) 
{ 
    if(!root) 
        return; 
          
    diagonalSum[vd] += root->data; 
  
    // increase the vertical distance if left child 
    diagonalSumUtil(root->left, vd + 1, diagonalSum); 
  
    // vertical distance remains same for right child 
    diagonalSumUtil(root->right, vd, diagonalSum); 
} 
  
// Function to calculate diagonal  
// sum of given binary tree 
void diagonalSum(struct Node* root) 
{ 
  
    // create a map to store Diagonal Sum 
    map<int, int> diagonalSum;  
      
    diagonalSumUtil(root, 0, diagonalSum); 
  
    map<int, int>::iterator it; 
        cout << "Diagonal sum in a binary tree is - "; 
      
    for(it = diagonalSum.begin(); 
                it != diagonalSum.end(); ++it) 
    { 
        cout << it->second << " "; 
    } 
} 
  
// Driver code 
int main() 
{ 
    struct Node* root = newNode(1); 
    root->left = newNode(2); 
    root->right = newNode(3); 
    root->left->left = newNode(9); 
    root->left->right = newNode(6); 
    root->right->left = newNode(4); 
    root->right->right = newNode(5); 
    root->right->left->right = newNode(7); 
    root->right->left->left = newNode(12); 
    root->left->right->left = newNode(11); 
    root->left->left->right = newNode(10); 
  
    diagonalSum(root); 
  
    return 0; 
} 
  
// This code is contributed by Aditya Goel 
Output:

Diagonal sum in a binary tree is - 9 19 4
